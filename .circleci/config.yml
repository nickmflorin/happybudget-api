version: 2

orbs:
  poetry: frameio/poetry@0.15.0
  python: circleci/python@0.2.1
  slack: circleci/slack@3.4.2

jobs:
  build:
    docker:
      - image: circleci/python:3.8.8
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
      - run:
          name: Install Dependencies
          command: |
            poetry install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8/site-packages"
            - "/home/circleci/.cache/pypoetry/virtualenvs"
      - run:
          name: Run Linting Checks
          command: |
            poetry run flake8 src/greenbudget
      - run:
          name: "Establish Test Result Directories"
          command: |
            mkdir -p ~/reports/test-results
      - run:
          name: Run Tests
          command: >-
            poetry run coverage run --parallel -m pytest --junit-xml=~/reports/test-results/pytest.xml
      - store_test_results:
          path: ~/reports/test-results

  deploy_to_app:
    docker:
      - image: circleci/python:3.8.8
    steps:
      - checkout
      - run: chmod +x ./deploy_to_app.sh
      - run: ./deploy_to_app.sh

  deploy_to_dev:
    docker:
      - image: circleci/python:3.8.8
    steps:
      - checkout
      - run: chmod +x ./deploy_to_dev.sh
      - run: ./deploy_to_dev.sh
      - run:
          name: "Deploy"
          command: |
            # 1 - Install AWS CLI
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -b ~/bin/aws

            # 2 - Get the public IP of the current CircleCI runner
            PUBLIC_IP=$(curl ipinfo.io/ip)

            # 3 - Get AWS Region
            AWS_REGION=us-east-2

            # 4 - SG ID
            SG_ID=sg-07ee1b656cb802745

            # 5 - Add an ingress rule to the security group
            ~/bin/aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SG_ID \
              --protocol tcp --port 22 --cidr $PUBLIC_IP/24

            # 6- Give the ingress rule some time to propogate
            sleep 5

            # 7- SSH to the server to deploy
            ssh -o StrictHostKeyChecking=no ec2-user@3.237.2.151 \
              cd /www/greenbudget-api

              echo "Building"
              sudo docker-compose -f docker-compose.dev.yml up --build -d

              echo "Collecting Static Files"
              docker-compose -f docker-compose.dev.yml exec web python manage.py collectstatic -c --no-input

              echo "Running Migrations"
              docker-compose -f docker-compose.dev.yml exec web python manage.py migrate

              echo "Restarting..."
              docker-compose -f docker-compose.dev.yml restart

            # 8- Remove the ingress rule
            ~/bin/aws ec2 revoke-security-group-ingress --region $AWS_REGION --group-id $SG_ID \
              --protocol tcp --port 22 --cidr $PUBLIC_IP/24

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      - build
      - deploy_to_dev:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - deploy_to_app:
          requires:
            - build
          filters:
            branches:
              only:
                - master