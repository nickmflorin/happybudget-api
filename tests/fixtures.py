import django.apps
import pytest

from .factories import (
    UserFactory, BudgetFactory, TemplateFactory, BudgetAccountFactory,
    BudgetSubAccountFactory, TemplateAccountFactory, TemplateSubAccountFactory,
    ActualFactory, CommentFactory, ContactFactory, FringeFactory,
    GroupFactory, ColorFactory, SubAccountUnitFactory, HeaderTemplateFactory,
    MarkupFactory, Lazy, ActualTypeFactory)


@pytest.fixture
def create_color(db):
    """
    A fixture that creates a :obj:`Color` instance using the
    :obj:`ColorFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_color(create_color):
    >>>     color = create_color()
    >>>     color.code
    >>>     #EFEFEF
    """
    def inner(*args, **kwargs):
        return ColorFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_user(db):
    """
    A fixture that creates a :obj:`User` instance using the
    :obj:`UserFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_user(create_user):
    >>>     user = create_user(first_name="jack")
    >>>     assert user.first_name == "jack"
    """
    def inner(*args, **kwargs):
        return UserFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_budget(user, db):
    """
    A fixture that creates a :obj:`Budget` instance using the
    :obj:`BudgetFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_budget(create_budget):
    >>>     budget = create_budget(name='Test Budget')
    >>>     assert budget.name == 'Test Budget'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        return BudgetFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_template(user, db):
    """
    A fixture that creates a :obj:`Template` instance using the
    :obj:`TemplateFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_template(create_template):
    >>>     template = create_template(name='Test Template')
    >>>     assert template.name == 'Test Template'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        return TemplateFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_fringe(user, db):
    """
    A fixture that creates a :obj:`Fringe` instance using the
    :obj:`FringeFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_fringe(create_fringe):
    >>>     fringe = create_fringe(rate=2.5)
    >>>     assert fringe.rate == 2.5
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return FringeFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_budget_account(user, db):
    """
    A fixture that creates a :obj:`BudgetAccount` instance using the
    :obj:`BudgetAccountFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_budget_account(create_budget_account):
    >>>     account = create_budget_account(description='Test Account')
    >>>     assert account.description == 'Test Account'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return BudgetAccountFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_template_account(user, db):
    """
    A fixture that creates a :obj:`TemplateAccount` instance using the
    :obj:`TemplateAccountFactory`.  Any data that is not explicitly provided
    will be randomly generated by the factory.

    Usage:
    -----
    >>> def test_temlpate_account(create_template_account):
    >>>     account = create_template_account(description='Test Account')
    >>>     assert account.description == 'Test Account'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return TemplateAccountFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_subaccount_unit(db):
    """
    A fixture that creates a :obj:`SubAccountUnit` instance using the
    :obj:`SubAccountUnitFactory`.  Any data that is not explicitly provided
    will be randomly generated by the factory.

    Usage:
    -----
    >>> def test_subaccount_unit(create_subaccount_unit):
    >>>     unit = create_subaccount_unit(title='Test')
    >>>     assert unit.title == 'Test'
    """
    def inner(*args, **kwargs):
        return SubAccountUnitFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_budget_subaccount(user, db):
    """
    A fixture that creates a :obj:`BudgetSubAccount` instance using the
    :obj:`BudgetSubAccountFactory`.  Any data that is not explicitly provided
    will be randomly generated by the factory.

    Usage:
    -----
    >>> def test_budget_subaccount(create_budget_subaccount):
    >>>     subaccount = create_budget_subaccount(name='Test Account')
    >>>     assert subaccount.name == 'Test Account'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return BudgetSubAccountFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_budget_subaccounts(create_budget_subaccount):
    """
    A fixture that creates a series of :obj:`BudgetSubAccount` instances using
    the :obj:`BudgetSubAccountFactory`.

    Usage:
    -----
    >>> def test_budget_subaccount(create_budget_subaccounts):
    >>>     subaccounts = create_budget_subaccounts(name='Test', count=1)
    >>>     assert subaccounts[0].name == 'Test'
    """
    def inner(*args, **kwargs):
        count = kwargs.pop('count', 1)
        return [
            create_budget_subaccount(*args, **kwargs)
            for i in range(count)
        ]
    return inner


@pytest.fixture
def create_template_subaccount(user, db):
    """
    A fixture that creates a :obj:`TemplateSubAccount` instance using the
    :obj:`TemplateSubAccountFactory`.  Any data that is not explicitly provided
    will be randomly generated by the factory.

    Usage:
    -----
    >>> def test_template_subaccount(create_template_subaccount):
    >>>     subaccount = create_template_subaccount(name='Test Account')
    >>>     assert subaccount.name == 'Test Account'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return TemplateSubAccountFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_template_subaccounts(create_template_subaccount):
    """
    A fixture that creates a series of :obj:`TemplateSubAccount` instances using
    the :obj:`TemplateSubAccountFactory`.

    Usage:
    -----
    >>> def test_template_subaccount(create_template_subaccounts):
    >>>     subaccounts = create_template_subaccounts(name='Test', count=1)
    >>>     assert subaccounts[0].name == 'Test'
    """
    def inner(*args, **kwargs):
        count = kwargs.pop('count', 1)
        return [
            create_template_subaccount(*args, **kwargs)
            for i in range(count)
        ]
    return inner


@pytest.fixture
def create_group(user, db):
    """
    A fixture that creates a :obj:`Group` instance using the
    :obj:`GroupFactory`.  Any data that is not explicitly provided will be
    randomly generated by the factory.

    Usage:
    -----
    >>> def test_group(create_group):
    >>>     group = create_group(name='Test Group')
    >>>     assert group.name == 'Test Group'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return GroupFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_markup(user, db):
    """
    A fixture that creates a :obj:`Markup` instance using the
    :obj:`MarkupFactory`.  Any data that is not explicitly provided will be
    randomly generated by the factory.

    Usage:
    -----
    >>> def test_markup(create_markup):
    >>>     markup = create_markup(identifier='Test Markup')
    >>>     assert markup.identifier == 'Test Markup'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return MarkupFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_actual_type(db):
    """
    A fixture that creates a :obj:`ActualType` instance using the
    :obj:`ActualTypeFactory`.  Any data that is not explicitly provided
    will be randomly generated by the factory.

    Usage:
    -----
    >>> def test_actual_type(create_actual_type):
    >>>     type = create_actual_type(title='Test')
    >>>     assert type.title == 'Test'
    """
    def inner(*args, **kwargs):
        return ActualTypeFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_actual(user, db):
    """
    A fixture that creates a :obj:`Actual` instance using the
    :obj:`ActualFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_actual(create_actual):
    >>>     actual = create_actual(description='Test Actual')
    >>>     assert actual.description == 'Test Actual'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        kwargs.setdefault('updated_by', user)
        return ActualFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_comment(user, db):
    """
    A fixture that creates a :obj:`Comment` instance using the
    :obj:`CommentFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_comment(create_comment):
    >>>     comment = create_comment(text='My Comment')
    >>>     assert comment.text == 'My Comment'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('user', user)
        return CommentFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_contact(user, db):
    """
    A fixture that creates a :obj:`Contact` instance using the
    :obj:`ContactFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_contact(create_contact):
    >>>     contact = create_contact(first_name='Jack')
    >>>     assert contact.first_name == 'Jack'
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('user', user)
        return ContactFactory(*args, **kwargs)
    return inner


@pytest.fixture
def create_header_template(user, db):
    """
    A fixture that creates a :obj:`HeaderTemplate` instance using the
    :obj:`HeaderTemplateFactory`.  Any data that is not explicitly provided will
    be randomly generated by the factory.

    Usage:
    -----
    >>> def test_create_header_template(create_header_template):
    >>>     template = create_header_template()
    >>>     assert template.left_image is None
    """
    def inner(*args, **kwargs):
        kwargs.setdefault('created_by', user)
        return HeaderTemplateFactory(*args, **kwargs)
    return inner


@pytest.fixture
def lazy():
    def inner(factory_fn, **kwargs):
        return Lazy(factory_fn, **kwargs)
    return inner


@pytest.fixture
def models(db):
    class Models:
        def __init__(self):
            for model in django.apps.apps.get_models():
                setattr(self, model.__name__, model)
    return Models()
